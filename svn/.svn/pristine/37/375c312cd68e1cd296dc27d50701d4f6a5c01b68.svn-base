/**
 * 修改支付密码
 * 
 * @author huoyujia
 * @date 2019-08-27
 */

let app = getApp();
var baseUrl = require("../../utils/base.js");
import Api from '/../../utils/config/Api/password.js';
let alert = require('../../utils/tools/alert.js');
let alertModal = alert.alertModal;
let alertModal1 = alert.alertModal1;
let loading = alert.loading;
Page({

  /**
   * 页面的初始数据
   */
  data: {
    //旧密码
    oldPassword: '',
    //新密码
    newPassword: '',
    //确认密码
    cofirmPassword: '',
    //旧密码
    oldPassword: '',
    //步骤
    step: null, 
    //验证码显示
    codeStatus: false, 
    //定时器名字
    timer: '',
    //倒计时初始值
    countDownNum: '60',
    //手机号
    phone: '', 
    //验证码
    messageCode: '',
    //手机号清除
    phoneCancel: false,
    //验证码清除
    codeCancel: false,
    //显示隐藏旧密码
    isOldPwd: true, 
    //显示隐藏新密码
    isNewPwd: true, 
    //显示隐藏确认密码
    isCofrimPwd: true, 
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function(options) {
    let that = this;
    if (options.type == "1"){
      this.setData({
        step: 1
      })
    } else if (options.type == "2"){
      this.setData({
        step: 3
      })
    }
  },

  //输入旧密码
  oldInput(e) {
    this.setData({
      oldPassword: e.detail.value
    })
  },

  //输入新密码
  newInput(e){
    this.setData({
      newPassword: e.detail.value
    })
  },

  //输入确认密码
  cofirmInput(e) {
    this.setData({
      cofirmPassword: e.detail.value
    })
  },

  //计时器
  countDown: function () {
    let that = this;
    let countDownNum = that.data.countDownNum;//获取倒计时初始值
    //如果将定时器设置在外面，那么用户就看不到countDownNum的数值动态变化，所以要把定时器存进data里面
    that.setData({
      timer: setInterval(function () {//这里把setInterval赋值给变量名为timer的变量
        //每隔一秒countDownNum就减一，实现同步
        countDownNum--;
        //然后把countDownNum存进data，好让用户知道时间在倒计着
        that.setData({
          countDownNum: countDownNum
        })
        //在倒计时还未到0时，这中间可以做其他的事情，按项目需求来
        if (countDownNum == 0) {
          //这里特别要注意，计时器是始终一直在走的，如果你的时间为0，那么就要关掉定时器！不然相当耗性能
          //因为timer是存在data里面的，所以在关掉时，也要在data里取出后再关闭
          clearInterval(that.data.timer);
          that.setData({
            codeStatus: false,
            countDownNum: '60'
          })
          //关闭定时器之后，可作其他处理codes go here
        }
      }, 1000)
    })
  },

  //获取验证码
  changeCodeStatus() {
    let myreg = /^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1})|(17[0-9]{1}))+\d{8})$/;
    if (!myreg.test(this.data.phone)) {
      wx.showToast({
        title: '手机号输入不正确',
        icon: 'none'
      })
      return
    }
    let that = this;
    that.setData({
      codeStatus: true
    })
    this.countDown();
    this.sendMessageCode(this.data.phone)
  },

  //手机号input
  inputPhone(e) {
    let status = true
    if (e.detail.value == '') {
      status = false
    }
    this.setData({
      phone: e.detail.value.replace(/\s+/g, ''),
      phoneCancel: status
    })
  },

  //验证码input
  inputCode(e) {
    let status = true
    if (e.detail.value == '') {
      status = false
    }
    this.setData({
      messageCode: e.detail.value.replace(/\s+/g, ''),
      codeCancel: status
    })
  },

  //清除手机号
  phoneCancel() {
    this.setData({
      phone: '',
      phoneCancel: false
    })
  },

  //清除验证码
  codeCancel() {
    this.setData({
      messageCode: '',
      codeCancel: false
    })
  },

  // 获取验证码
  sendMessageCode(phone) {
    let params = {
      mobile: phone
    }
    Api.getPhoneCode(params).then(res => {
      console.log("获取验证码", res)
      if (res.data.status === "0000") {
        wx.showToast({
          title: '短信验证码已发',
          icon: 'none'
        })
      } else {
        wx.showToast({
          title: res.data.msg,
          icon: 'none'
        })
      }
    })
  },

  //显示隐藏旧密码
  showOldPwd(){
    var isOldPwd = !this.data.isOldPwd;
    this.setData({
      isOldPwd: isOldPwd
    })
  },

  //显示隐藏新密码
  showNewPwd() {
    var isNewPwd = !this.data.isNewPwd;
    this.setData({
      isNewPwd: isNewPwd
    })
  },

  //显示隐藏确认密码
  showCofrimPwd() {
    var isCofrimPwd = !this.data.isCofrimPwd;
    this.setData({
      isCofrimPwd: isCofrimPwd
    })
  },

  //下一步
  nextStep(){
    let that = this;
    //step：步骤，1验证旧密码。2输入新密码。3忘记密码手机号验证
    if(that.data.step == 1){
      if(that.data.oldPassword.length != 6){
        alertModal1("旧密码长度不正确")
        return;
      }
      loading("请求中")
      let _parms = {
        oldPwd: that.data.oldPassword
      }
      Api.checkOldPwd(_parms).then((res) => {
        wx.hideLoading();
        if (res.data.status == '0000') {
          that.setData({
            step: 2
          })
        } else {
          alertModal1(res.data.msg)
        }
      }).catch((res) => {
        alertModal1("请求服务失败")
      })
    } else if (that.data.step == 2){
      if (that.data.newPassword.length != 6){
        alertModal1("新密码的长度不正确")
        return;
      } else if (that.data.cofirmPassword.length != 6){
        alertModal1("确认新密码的长度不正确")
        return;
      } else if (that.data.newPassword != that.data.cofirmPassword){
        alertModal1("两次密码不一致")
        return;
      }
      loading("请求中")
      let _parms = {
        oldPwd: that.data.oldPassword,
        newPwd: that.data.newPassword,
        newSecondPwd: that.data.cofirmPassword
      }
      Api.updatePayPwd(_parms).then((res) => {
        wx.hideLoading();
        if (res.data.status == '0000') {
          alertModal1("密码修改成功")
          wx.navigateBack({
            detal:1
          })
        } else {
          alertModal1(res.data.msg)
        }
      }).catch((res) => {
        alertModal1("请求服务失败")
      })
    } else if (that.data.step == 3){
      let myreg = /^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1})|(17[0-9]{1}))+\d{8})$/;
      if (!myreg.test(this.data.phone)) {
        wx.showToast({
          title: '手机号输入不正确',
          icon: 'none'
        })
        return
      }
      if (that.data.messageCode.length != 4){
        alertModal1("验证码长度不正确")
        return;
      }
      loading("请求中")
      let _parms = {
        code: that.data.messageCode,
        mobile: that.data.phone
      }
      Api.checkUser(_parms).then((res) => {
        wx.hideLoading();
        if (res.data.status == '0000') {
          that.setData({
            step: 2
          })
        } else {
          alertModal1(res.data.msg)
        }
      }).catch((res) => {
        alertModal1("请求服务失败")
      })
    }
  },
})